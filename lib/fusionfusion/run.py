#! /usr/bin/env python

import argparse, subprocess, yaml
import parseJunctionInfo
import filterJunctionInfo
import utils

def cluster_filter_junction(inputFilePath, outputFilePrefix, Params):

    parseJunctionInfo.clusterJuncInfo(inputFilePath,
                                      outputFilePrefix + ".chimeric.clustered.txt")

    filterJunctionInfo.filterCoverRegion(outputFilePrefix + ".chimeric.clustered.txt",
                                         outputFilePrefix + ".chimeric.clustered.filt1.txt", Params)
    
    filterJunctionInfo.extractSplicingPattern(outputFilePrefix + ".chimeric.clustered.filt1.txt", 
                                              outputFilePrefix + ".chimeric.clustered.splicing.txt", Params):

    ############
    filterJunctionInfo.makeJucSeqPairFa(outputFilePrefix + ".chimeric.clustered.splicing.txt",
                                        outputFilePrefix + ".chimeric.clustered.splicing.contig.fa", Params):

    # alignment of contigs generated by manual assembly
    blat_path = Params["blat_path"]
    blat_option = Params["blat_option"]
    reference_genome = Params["reference_genome"]

    FNULL = open(os.devnull, 'w')
    subprocess.call(blat_path, blat_option, reference_genome, 
                    outputFilePrefix + ".chimeric.clustered.splicing.contig.fa",
                    outputFilePrefix + ".chimeric.clustered.splicing.contig.psl", stdout = FNULL, stderr = subprocess.STDOUT)


    filterJunctionInfo.checkMatching(outputFilePrefix + ".chimeric.clustered.splicing.contig.psl",
                                     outputFilePrefix + ".chimeric.clustered.splicing.contig.check.txt", Params)

    filterJunctionInfo.filterContigCheck(outputFilePrefix + ".chimeric.clustered.splicing.txt",
                                         outputFilePrefix + ".chimeric.clustered.filt2.txt",
                                         outputFilePrefix + ".chimeric.clustered.splicing.contig.check.txt", Params)



def main(args):

    starBamFile = args.star
    ms2BamFile = args.ms2
    paramInfoFile = args.paramInfoFile
    output_dir = args.out

    try:
        with open(args.paramInfoFile, 'r') as fIN:
            paramConf = yaml.load(fIN)
    except yaml.YAMLError, exc:
        print "Error in sample information file:", exc


    ####################
    # make direcotry
    utils.make_directory(output_dir)
    ####################

    ####################
    # parsing chimeric reads from bam files
    if starBamFile is not None:

        parseJunctionInfo.parseJuncInfo_STAR(starBamFile, output_dir + "/star.chimeric.tmp.bedpe", paramConf)
        utils.sortBedpe(output_dir + "/star.chimeric.tmp.bedpe", output_dir + "/star.chimeric.bedpe")

        cluster_filter_junction(output_dir + "/star.chimeric.bedpe", output_dir + "/star", paramConf)


    if ms2BamFile is not None:

        parseJunctionInfo.parseJuncInfo_STAR(ms2BamFile, output_dir + "/ms2.chimeric.tmp.bedpe", paramConf) 
        utils.sortBedpe(output_dir + "/ms2.chimeric.tmp.bedpe", output_dir + "/ms2.chimeric.bedpe")

        cluster_filter_junction(output_dir + "/ms2.chimeric.bedpe", output_dir + "/ms2", paramConf)


